# Generated by Django 4.2.7 on 2025-05-29 23:51

from decimal import Decimal

from django.db import migrations


def create_default_plans(apps, schema_editor):
    """Create default subscription plans"""
    Plan = apps.get_model("users", "Plan")

    # Create default plans
    plans = [
        {
            "name": "Free",
            "slug": "free",
            "daily_request_limit": 100,
            "price_monthly": Decimal("0.00"),
            "stripe_price_id": "",  # No Stripe price for free plan
            "features": {
                "support": "Community",
                "api_access": "Basic",
                "rate_limit": "100 requests/day",
            },
            "is_active": True,
        },
        {
            "name": "Basic",
            "slug": "basic",
            "daily_request_limit": 1000,
            "price_monthly": Decimal("9.99"),
            "stripe_price_id": "",  # You'll need to add this from Stripe dashboard
            "features": {
                "support": "Email",
                "api_access": "Standard",
                "rate_limit": "1,000 requests/day",
            },
            "is_active": True,
        },
        {
            "name": "Premium",
            "slug": "premium",
            "daily_request_limit": 10000,
            "price_monthly": Decimal("29.99"),
            "stripe_price_id": "",  # You'll need to add this from Stripe dashboard
            "features": {
                "support": "Priority",
                "api_access": "Advanced",
                "rate_limit": "10,000 requests/day",
            },
            "is_active": True,
        },
        {
            "name": "Enterprise",
            "slug": "enterprise",
            "daily_request_limit": 100000,
            "price_monthly": Decimal("99.99"),
            "stripe_price_id": "",  # You'll need to add this from Stripe dashboard
            "features": {
                "support": "Dedicated",
                "api_access": "Enterprise",
                "rate_limit": "100,000 requests/day",
                "custom_integrations": True,
            },
            "is_active": True,
        },
    ]

    for plan_data in plans:
        Plan.objects.get_or_create(**plan_data)


def assign_free_plan_to_users(apps, schema_editor):
    """Assign free plan to existing users"""
    User = apps.get_model("users", "User")
    Plan = apps.get_model("users", "Plan")

    try:
        free_plan = Plan.objects.get(slug="free")
        User.objects.filter(current_plan__isnull=True).update(current_plan=free_plan, subscription_status="active")
    except Plan.DoesNotExist:
        pass


def reverse_migration(apps, schema_editor):
    """Reverse the migration"""
    Plan = apps.get_model("users", "Plan")
    Plan.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("users", "0006_plan_remove_user_daily_request_limit_and_more"),
    ]

    operations = [
        migrations.RunPython(create_default_plans, reverse_migration),
        migrations.RunPython(assign_free_plan_to_users, migrations.RunPython.noop),
    ]
